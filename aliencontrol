#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""The aliencontrol ROS node

This ROS node allows controlling the execution of external programs from within a ROS node.
"External" refers to binary files and scripts that are not ROS nodes, for example bash scripts and system programs.
"To control" means starting and stopping these applications.

In order to start an external process, pass the following commands to aliencontrol.

Examples:
    # Start an aliencontrol ROS node that launches top inside the current terminal.
    $ rosrun aliencontrol aliencontrol "top"

    # Launch top in a separate terminal.
    $ rosrun aliencontrol aliencontrol "xterm -e top"

These commands spawn a aliencontrol ROS node. The node terminates once you quit the external application. If you terminate the node, aliencontrol it will automatically kill the external application before shutting down.
"""

# Import the required system libraries.
import rospy
import sys
import argparse
import os
import subprocess
import signal


# Start the aliencontrol ROS node.
if __name__ == '__main__':
    # Register the node with the roscore.
    rospy.init_node('aliencontrol', anonymous=True)

    # Extract the command to execute from the input arguments.
    # Accept both a ROS private parameter (like in "rosrun aliencontrol aliencontrol _cmd:=top")
    # or an anonymous parameter (like in "rosrun aliencontrol aliencontrol top").
    cmd = ''
    if rospy.has_param('~cmd'):
        # Read the parameter from the ROS parameter server.
        cmd = rospy.get_param('~cmd')
    else:
        # Read the anonymous parameter.
        args = rospy.myargv(argv=sys.argv)

        # Delete the first input argument, which is always the path of this script.
        del(args[0])

        # Extract the command.
        parser = argparse.ArgumentParser(
            description='Control external program from within a ROS node.')
        parser.add_argument('cmd', help='external command to execute')
        cmd = parser.parse_args(args).cmd

    # Start the external application as a process group. In this way, we make sure to control not only the external 
    # process, but all of its subprocesses.
    rospy.loginfo('Executing command \"%s\" ...', cmd)
    alien = subprocess.Popen(args=cmd, shell=True, preexec_fn=os.setsid)

    # Define the shutdown handler.
    def shutdown():
        """Shutdown handler
        
        Kills the external application.
        """
        rospy.loginfo('Shutting down aliencontrol ...')

        # Kill the external application.
        try:
            if alien.poll() == None:
                rospy.loginfo(
                    'Sending SIGTERM to external process (PID=%i, CMD=%s) ...', alien.pid, cmd)
                os.killpg(os.getpgid(alien.pid), signal.SIGTERM)
        except Exception as e:
            rospy.logerr(e)
            raise

    # Register the shutdown handler.
    rospy.on_shutdown(shutdown)

    # Poll the external process to see if it is still active. If not, exit.
    rate = rospy.Rate(10)
    while (not rospy.is_shutdown()) and (alien.poll() == None):
        rate.sleep()
